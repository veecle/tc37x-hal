//!
//! Registers, structs and traits
//!
use tc37x_pac::Peripherals;
use tc37x_rt::wdtcon::{
    clear_cpu_endinit, clear_safety_endinit, set_cpu_endinit, set_safety_endinit,
};

pub mod ccu {
    pub mod config;
    pub mod register_block;
}

pub mod pll {
    pub mod config;
    pub mod register_block;
}

pub mod oscillator {
    pub mod config;
    pub mod register_block;
}

pub mod config;
pub mod setup;

/// A system unit helper trait :) Docs in the [SystemAccess] trait
pub trait SystemUnit<'r>
where
    Self: Sized,
{
    /// Create a new protected unit wrapper in a system access... better
    /// than nothing :)
    fn new(p: &'r Peripherals) -> SystemAccess<Self> {
        SystemAccess(Self::from_peripherals(p))
    }

    /// Create self from peripherals
    fn from_peripherals(p: &'r Peripherals) -> Self;
}

/// A naive wrapper around a register that requires protected access. This is useful for (SCU+)
/// that must be accessed internally via a `with` operation to enable/disable safety configuration
///
/// Terrible in design, hacked together until we finally figure out how AURIX works as a whole
///
/// Gut feeling: each register **shall** be associated with an accessor trait, this trait allows
/// for <LOCKED> & <UNLOCKED> access and the PAC impl<LOCKED> and impl<UNLOCKED> for the various
/// registers
///
/// Transition between LOCKED/UNLOCKED goes through a type-safe accessor that perform the
/// state transition after... if autogenerated via PAC this would reduce the codebase immensely (as well
/// as possibilities of error)
pub struct SystemAccess<T: Sized>(T);

impl<'r, T: SystemUnit<'r> + 'r> SystemAccess<T> {
    /// Run an inner closure on self with checked safety/cpu permissions
    pub fn access<R>(&'r self, closure: impl FnOnce(&'r T) -> R) -> R {
        // Clear the Safety to allow for register modifications
        clear_cpu_endinit();
        clear_safety_endinit();

        let output = closure(&self.0);

        // Set safety to block register modification
        set_safety_endinit();
        set_cpu_endinit();

        output
    }
}
